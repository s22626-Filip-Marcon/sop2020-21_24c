1.zad 

int main(){

    int x;
    printf("PID: %d\t PPID: %d\n", getpid(), getppid());
    scanf("%d", &x);
    return 0;   
}

2.zad

int main(){

    __pid_t Fork = fork();
    printf("PID: %d\t PPID: %d\n", getpid(), getppid());
    if(Fork > 0){
        wait(NULL);
        printf("Rodzic zakonczyl czekanie\n");
    }
    return 0;
}

3.zad 


int main(int argc, char **argv){

    int numbers = atoi(argv[1]);
    __pid_t Fork = fork();
    printf("PID: %d\t PPID: %d\n", getpid(), getppid());
    int i;
    if(Fork > 0){
        int sum = 0;
        for(i=0; i <= numbers; i++){
            sum += i;
        }
        wait(NULL);
        printf("Suma %d\n", sum);
    }else{
        for(i = 1; i <= numbers; i +=  2)
        printf("Liczba nieparzysta: %d\n", i);
    }
    return 0;
}

4.zad 

int main(int argc, char **agrv){

    int i;
    for(i=0; i<10; i++){
        pid_t pid = fork();
        if(pid()==0)
            printf("PID: %d\t PPID: %d\n", i, getpid(), getppid());
        else{
            wait(NULL);
            printf("%d Rodzic juz nie czeka! PID: %d\n", i, getpid());
            break;
        }
    }    
    return 0;
}

5.zad 

int main(int argc ,char **argv){
    int i;
    for(i=0; i<3; i++){      
        pid_t pid = fork();
        if(pid == 0){            
            printf("%d Pid: %d\t  Ppid: %d\n",i,getpid(),getppid());    
            system("pstree");        
        }else{
            wait(NULL);
        }
    }
    return 0;
}